---
AWSTemplateFormatVersion: 2010-09-09
Description: Guidance for Sentiment Analysis on AWS (SO9449). This template deploys a VPC, Aurora DB Cluster, and a Amazon SageMaker Notebook Instance

Parameters:
  TemplateName:
    Type: String
    Default: genai-pgvector-labs
    Description: Name used for different elements created.

  VpcName:
    Default: APGPGVectorWorkshop
    Type: String

  VpcCIDR:
    Default: 10.215.0.0/16
    Type: String

  Subnet1CIDR:
    Default: 10.215.10.0/24
    Type: String

  Subnet2CIDR:
    Default: 10.215.20.0/24
    Type: String

  Subnet3CIDR:
    Default: 10.215.30.0/24
    Type: String

  Subnet4CIDR:
    Default: 10.215.40.0/24
    Type: String

  DefaultCodeRepository:
    Default: https://github.com/aws-samples/aurora-postgresql-pgvector.git
    Type: String

  DBEngineVersion:
    Type: String
    Default: 15.5
    AllowedValues:
      - 15.5
  
  DBInstanceSize:
    Type: String
    Default: db.r6g.2xlarge
    AllowedValues:
      - db.r6g.xlarge
      - db.r6g.2xlarge
      - db.r6g.4xlarge
      - db.t4g.large

  DBPort:
    Description: TCP/IP Port for the Database Instance
    Type: Number
    Default: 5432
    ConstraintDescription: 'Must be in the range [1150-65535]'
    MinValue: 1150
    MaxValue: 65535


Resources:
## Create enhanced monitoring role
  roleEnhancedMonitoring:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-monitor-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - monitoring.rds.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole

# VPC ----------------------------------------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref VpcName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref VpcName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref Subnet1CIDR
      Tags:
        - Key: Name
          Value: !Sub ${VpcName} (Public)

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref Subnet2CIDR
      Tags:
        - Key: Name
          Value: !Sub ${VpcName} (Public)

  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: false
      CidrBlock: !Ref Subnet3CIDR
      Tags:
        - Key: Name
          Value: !Sub ${VpcName} (Private)

  Subnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: false
      CidrBlock: !Ref Subnet4CIDR
      Tags:
        - Key: Name
          Value: !Sub ${VpcName} (Private)

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref VpcName

  DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet1

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet2

  Subnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet3

  Subnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet4

# END VPC ------------------------------------------------------

# Cloud9 Instance
  Cloud9InstanceWS:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Name: !Sub ${TemplateName}-Cloud9-IDE
      Description: Cloud9 IDE to support Generative AI with pgvector labs
      AutomaticStopTimeMinutes: 240
      SubnetId: !Ref Subnet1
      InstanceType: m5.2xlarge
      ImageId: amazonlinux-2-x86_64
      #OwnerArn: !Sub 'arn:aws:sts::${AWS::AccountId}:assumed-role/WSParticipantRole/Participant'

# NOTEBOOK -----------------------------------------------------
  NotebookInstance:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      InstanceType: "ml.c5.2xlarge"
      RoleArn: !GetAtt ExecutionRole.Arn
      SubnetId: !Ref Subnet1
      SecurityGroupIds:
        - !Ref SecurityGroup
      DefaultCodeRepository: !Ref DefaultCodeRepository
      VolumeSizeInGB: 50
  
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Notebook Instance Security Group
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ExecutionRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "sagemaker.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AmazonRDSReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
      Policies:
        - 
          PolicyName: "s3_access"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: 
                  - "s3:PutBucketPolicy"
                  - "s3:DeleteBucket"
                Resource: "arn:aws:s3:::sagemaker-*"                

  AuroraLabComprehendAccessRole:
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: !Sub auroralab-comprehend-access-${AWS::Region}
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: "rds.amazonaws.com"
            Action: "sts:AssumeRole"

  AuroraLabComprehendAccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub comprehend-policy-${AWS::Region} 
      Roles:
        - Ref: "AuroraLabComprehendAccessRole"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "comprehend:DetectSentiment"
              - "comprehend:BatchDetectSentiment"
            Resource: "*"

# END NOTEBOOK -------------------------------------------------

# RDS IAM Role for Amazon Bedrock ------------------------------

  AuroraBedrockRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub Aurora-Bedrock-Role-${AWS::Region} 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "rds.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - 
          PolicyName: !Sub ${AWS::StackName}-Aurora-Bedrock-policy-${AWS::Region} 
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: 
                  - "bedrock:InvokeModel"
                Resource: [ !Sub "arn:aws:bedrock:*:${AWS::AccountId}:provisioned-model/*" , "arn:aws:bedrock:*::foundation-model/*" ]

# END RDS IAM Role for Amazon Bedrock ------------------------------

# Aurora PostgreSQL -----------------------------------------------

  EncryptionKey:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: !Ref AWS::StackName
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}"
      TargetKeyId: !Ref EncryptionKey

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "RDS DB Subnet Group"
      SubnetIds: [!Ref Subnet3, !Ref Subnet4 ]

  ## Create parameter groups for DB cluster
  apgcustomclusterparamgroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: "Aurora PostgreSQL Custom Cluster parameter group"
      Family: aurora-postgresql15
      Parameters:
        shared_preload_libraries: "pg_stat_statements"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-clusterparamgroup"
  
  ## Create parameter groups for cluster nodes
  apgcustomdbparamgroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: !Sub ${AWS::StackName}-dbparamgroup
      Family: aurora-postgresql15
      Parameters:
        log_rotation_age: '1440'
        log_rotation_size: '102400'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-dbparamgroup

  RDSSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub apgpg-pgvector-secret-${AWS::Region}
      Description: 'This is the secret for Aurora cluster'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres" }'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludePunctuation: true

  VPCSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Ref DBPort
        ToPort: !Ref DBPort
        CidrIp: !Ref VpcCIDR
        Description: 'Access to AppServer Host Security Group'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-DBSecurityGroup'

## Create Aurora cluster
  DBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: "apgpg-pgvector"
      Engine: aurora-postgresql
      Port: !Ref DBPort
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecrets, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecrets, ':SecretString:password}}' ]]
      DBClusterParameterGroupName: !Ref apgcustomclusterparamgroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      AutoMinorVersionUpgrade: true
      EngineVersion: "15.5"
      KmsKeyId: !Ref EncryptionKey
      StorageEncrypted: true
      StorageType: aurora-iopt1
      BackupRetentionPeriod: 7
      DeletionProtection: false
      VpcSecurityGroupIds: [ !Ref VPCSecurityGroup ]
      AssociatedRoles:
        - RoleArn: !GetAtt AuroraLabComprehendAccessRole.Arn
          FeatureName: Comprehend
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}"

## Deploy the first cluster node (always the writer)
  DBNodeWriter:
    Type: AWS::RDS::DBInstance
    DependsOn: DBCluster
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceIdentifier: !Sub ${AWS::StackName}-node-01
      CopyTagsToSnapshot: true
      DBInstanceClass: !Ref DBInstanceSize
      DBParameterGroupName: !Ref apgcustomdbparamgroup
      Engine: aurora-postgresql
      MonitoringInterval: 1
      MonitoringRoleArn: !GetAtt roleEnhancedMonitoring.Arn
      PubliclyAccessible: true
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      AutoMinorVersionUpgrade: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-node-01

## Deploy the reader node  
  DBNodeReader:
    Type: AWS::RDS::DBInstance
    DependsOn: DBNodeWriter
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceIdentifier: !Sub ${AWS::StackName}-node-02
      CopyTagsToSnapshot: true
      DBInstanceClass: !Ref DBInstanceSize
      DBParameterGroupName: !Ref apgcustomdbparamgroup
      Engine: aurora-postgresql
      MonitoringInterval: 1
      MonitoringRoleArn: !GetAtt roleEnhancedMonitoring.Arn
      PubliclyAccessible: true
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      AutoMinorVersionUpgrade: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-node-02

  SecretPostgreSQLAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref RDSSecrets
      TargetId: !Ref DBCluster
      TargetType: AWS::RDS::DBCluster

# end Aurora PostgreSQL -----------------------------------------------

Outputs:

  NotebookInstanceURL:
    Description: SageMaker Notebook Instance URL
    Value: !Join
      - ''
      - - !Sub 'https://console.aws.amazon.com/sagemaker/home?region=${AWS::Region}#/notebook-instances/openNotebook/'
        - !GetAtt NotebookInstance.NotebookInstanceName
        - '?view=classic'

  DBEndpoint:
    Description: 'Aurora PostgreSQL Endpoint'
    Value: !GetAtt 'DBCluster.Endpoint.Address'
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-DBEndPoint'

  DBSecret:
    Description: Database Secret
    Value: !Ref RDSSecrets
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-DBSecrets'

  AuroraBedrockRole:
    Description: IAM Role for Amazon Aurora and Amazon Bedrock
    Value: !Ref AuroraBedrockRole
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-AuroraBedrockRole'

